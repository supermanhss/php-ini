[PHP]

;;;;;;;;;;;;;;;
; 关于PHP配置 ;
;;;;;;;;;;;;;;;

; PHP的初始化文件（通常称为php.ini）负责配置PHP行为的许多方面。

; PHP尝试从多个位置查找并加载此配置。
; 以下是其搜索顺序的摘要：
; 1. SAPI模块的特定位置。
; 2. PHPRC环境变量（自PHP 5.2.0起）。
; 3. Windows上的许多预定义注册表项（自PHP 5.2.0起）。
; 4. 当前工作目录（CLI除外）。
; 5. Web服务器的目录（用于SAPI模块）或PHP目录。
; 有关更多特定信息，请参见PHP文档。http://php.net/configuration.file

; 该文件的语法非常简单。 空格和行以分号开头的内容会被静默忽略（您可能已经猜到过）。
; 即使标头（例如[Foo]）也被忽略，即使他们可能在将来意味着某些事情。

; 指令使用以下语法指定：
; 指令=值
; 指令名称区分大小写 foo=bar与 FOO=bar 不同。
; 指令是用于配置PHP或PHP扩展的变量。
; 指令，因为未设置或输入错误，将使用默认值。

; 值可以是字符串，数字，PHP常量（例如E_ALL或M_PI），
; INI常量之一（On，Off，True，False，Yes，No和None）或表达式（例如E_ALL和 ~E_NOTICE），
; 带引号的字符串（“bar”）或对先前设置的变量或指令的引用（例如${foo}）

; INI文件中的表达式仅限于按位运算符和括号：
; |  bitwise OR
; ^  bitwise XOR
; &  bitwise AND
; ~  bitwise NOT
; !  boolean NOT

; 布尔值真可以使用这些值：1, On, True or Yes.
; 布尔值假可以使用这些值：0, Off, False or No.

; 可以通过在等号后不写任何内容或使用None关键字来表示一个空字符串：

; foo =         ; 设置 foo 为一个空值
; foo = None    ; 设置 foo 为一个空值
; foo = "None"  ; 设置 foo 的值为“None”

; 如果您在值中使用常量，并且这些常量属于动态加载的扩展（PHP扩展或Zend扩展），则只能在加载该扩展的行之后使用这些常量。


;;;;;;;;;;;;;;;;;;;
; 关于PhP配置文件 ;
;;;;;;;;;;;;;;;;;;;
; PHP附带了两个INI文件。
; 建议一种在生产环境中使用，另一种建议在开发环境中使用。

; PHP生产配置包含以安全性，性能和最佳实践为核心的设置。但是请注意，这些设置可能会与一些应用程序存在兼容性。我们建议在生产和测试环境中使用生产的配置。

; PHP开发配置与其生产配置非常相似，除了在出错方面更为冗长。我们建议仅在开发环境中使用开发版本，因为向用户显示的错误可能会无意间泄漏本来安全的信息。


;;;;;;;;;;;;
; 快速参考 ;
;;;;;;;;;;;;

; 以下是INI的生产或开发版本中与PHP的默认行为不同的所有设置：

; display_errors: 显示错误 
;   默认值: On
;   开发环境值: On
;   生产环境值: Off

; display_startup_errors: 显示启动错误
;   默认值: On
;   开发环境值: On
;   生产环境值: Off

; error_reporting：错误报告
;   默认值: E_ALL
;   开发环境值: E_ALL
;   生产环境值: E_ALL & ~E_DEPRECATED & ~E_STRICT

; log_errors：错误日志
;   默认值: Off
;   开发环境值: On
;   生产环境值: On

; max_input_time: 最大输入时间
;   默认值: -1 (Unlimited)
;   开发环境值: 60 (60 seconds)
;   生产环境值: 60 (60 seconds)

; output_buffering: 输出缓冲
;   默认值: Off
;   开发环境值: 4096
;   生产环境值: 4096

; register_argc_argv：影响$argv和$argc
;   默认值: On
;   开发环境值: Off
;   生产环境值: Off

; request_order：影响$_REQUEST
;   默认值: None
;   开发环境值: "GP"
;   生产环境值: "GP"

; session.gc_divisor: session垃圾回收 
;   默认值: 100
;   开发环境值: 1000
;   生产环境值: 1000

; session.sid_bits_per_character: 定义将二进制哈希数据转换为可读性时每个字符中存储多少位 
;   默认值: 4
;   开发环境值: 5
;   生产环境值: 5

; short_open_tag：启用<?= $xx ?>替代<?php echo $xx ?>
;   默认值: On
;   开发环境值: Off
;   生产环境值: Off

; variables_order：影响$_ENV
;   默认值: "EGPCS"
;   开发环境值: "GPCS"
;   生产环境值: "GPCS"


;;;;;;;;;;;;;;;
; PHP配置选项 ;
;;;;;;;;;;;;;;;

; 用户定义的php.ini（.htaccess）文件的名称。 默认值为“ .user.ini”
;user_ini.filename = ".user.ini"

; 要禁用此功能，请将此选项设置为空值
;user_ini.filename =

; 用户定义的php.ini文件的TTL（生存时间），以秒为单位。 默认值为300秒（5分钟）
;user_ini.cache_ttl = 300


;;;;;;;;;;;;;;;;
; 语言配置选项 ;
;;;;;;;;;;;;;;;;

; 在Apache下启用PHP脚本语言引擎。http://php.net/engine
engine = On

; 启用短标签 <?= $xxx ?> 代替 <?php echo $xxx ?>
short_open_tag = Off

; 浮点数中显示的有效位数。http://php.net/precision
precision = 14

; 输出缓冲是一种机制，用于控制PHP在将数据推送到客户端之前在内部保留多少输出数据（不包括标头和cookie）。 如果您的应用程序的输出超出了此设置，PHP将以大约您指定的大小的块形式发送该数据。
; 启用此设置并管理其最大缓冲区大小可能会产生一些未知的副作用，具体取决于您的应用程序和Web服务器。
; 在生产服务器上，出于性能原因，4096字节是一个很好的设置。
; http://php.net/output-buffering
output_buffering = 4096

; 您可以将脚本的所有输出重定向到一个函数。  
; 例如，如果将output_handler设置为“mb_output_handler”，则字符编码将透明地转换为指定的编码。
; 设置任何输出处理程序会自动打开输出缓冲。
; 注意: 
; 	1.编写可移植脚本的人不应依赖于此ini指令。而是使用ob_start（）显式设置输出处理程序。 
;	2.除非您知道脚本在做什么，否则使用此ini指令可能会导致问题。
; http://php.net/output-handler
;output_handler =

; URL重写器功能通过使用输出缓冲区即时重写URL。 您可以通过此配置设置目标标签。
;url_rewriter.tags

; 默认情况下，URL重写器不会重写绝对URL或格式。 要启用绝对URL重写，必须在RUNTIME定义允许的主机。
;url_rewriter.hosts

; 使用zlib库的透明输出压缩此选项的有效值为'off'，'on'或用于压缩的特定缓冲区大小（默认值为4KB）http://php.net/zlib.output-compression
zlib.output_compression = Off

; http://php.net/zlib.output-compression-level
;zlib.output_compression_level = -1

; 如果在此处激活了zlib.output_compression，则不能指定其他输出处理程序。 此设置与output_handler相同，但顺序不同。http://php.net/zlib.output-handler
;zlib.output_handler =

; 隐式刷新告诉输出层在每个输出块之后自动刷新自身。
; 这等效于在每次调用print（）或echo（）以及每个HTML块之后都调用PHP函数flush（）。 
；启用此选项会严重影响性能，通常建议仅将其用于调试目的。 
；http://php.net/implicit-flush
implicit_flush = Off

; 设置反序列化回调函数的实现。
unserialize_callback_func =

; unserialize_max_depth 指定未序列化结构的默认深度限制。
; 将深度限制设置得太高可能会在非序列化期间导致堆栈溢出。
; 值为0将禁用深度限制。
;unserialize_max_depth = 4096

; 对浮点数和双精度数进行序列化时，将在浮点数之后存储serialize_precision有效数字。 
; 如果使用-1，则使用dtoa模式0，它会自动选择最佳精度。
serialize_precision = -1

; open_basedir（如果已设置）将所有文件操作限制在定义的目录及以下目录中。
; http://php.net/open-basedir
;open_basedir =

; 禁用函数，该指令允许您出于安全原因禁用某些功能。
; 它接收以逗号分隔的函数名称列表。
; http://php.net/disable-functions
disable_functions =

; 禁用类，该指令允许您出于安全原因禁用某些类。
; 它接收以逗号分隔的类名称列表。
; http://php.net/disable-classes
disable_classes =

; 语法突出显示模式的颜色。
; http://php.net/syntax-highlighting
;highlight.string  = #DD0000
;highlight.comment = #FF9900
;highlight.keyword = #007700
;highlight.default = #0000BB
;highlight.html    = #000000

; 如果启用，即使用户中止请求，也将允许该请求完成。如果执行长请求，请考虑启用它。
; PHP的默认行为是禁用此功能。
; http://php.net/ignore-user-abort
;ignore_user_abort = On

; 确定要由PHP使用的实际路径缓存的大小。
; 在PHP需要打开许多文件，应增加该值。
; 注意: 如果 open_basedir 被设置, 这个缓存会被禁用。
; http://php.net/realpath-cache-size
;realpath_cache_size = 4096k

; 时间长度，以秒为单位，用于缓存给定文件或目录的真实路径信息。
; 对于很少更改文件的系统，请考虑增加此值。 
; http://php.net/realpath-cache-ttl
;realpath_cache_ttl = 120

; 启用或禁用循环引用收集器。
; http://php.net/zend.enable-gc
zend.enable_gc = On

; CP936，Big5，CP949和Shift_JIS是此类编码的示例。 
; 要使用此功能，必须启用mbstring扩展。
; Default: Off
;zend.multibyte = Off

; 设置脚本的默认编码。
; 除非脚本顶部出现“ declare（encoding = ...）”指令，否则将使用该值。
; 仅在设置了zend.multibyte的情况下影响。
; Default: ""
;zend.script_encoding =

; 允许从为异常生成的堆栈跟踪中包括或排除参数
; 在生产中，建议打开此设置以禁止在堆栈跟踪中输出敏感信息
; Default: Off
zend.exception_ignore_args = On


;;;;;;;;
; 杂项 ;
;;;;;;;;

; 决定PHP是否可以公开其已安装在服务器上的事实（例如，通过将其签名添加到Web服务器头中）。
; 无论如何，这都不是安全威胁，但是可以确定是否在服务器上使用PHP。
; http://php.net/expose-php
expose_php = On


;;;;;;;;;;;;
; 资源限制 ;
;;;;;;;;;;;;

; 每个脚本的最大执行时间，以秒为单位
; http://php.net/max-execution-time
; Note: 对于CLI SAPI，此指令硬编码为0
max_execution_time = 30

; 每个脚本可用于分析请求数据的最长时间。 最好将此时间限制在生产服务器上，以消除运行时间过长的脚本。
; Note: 对于CLI SAPI，此指令硬编码为-1
; 默认值: -1 (Unlimited)
; 开发环境值: 60 (60 seconds)
; 生产环境值: 60 (60 seconds)
; http://php.net/max-input-time
max_input_time = 60

; 最大输入变量嵌套级别
; http://php.net/max-input-nesting-level
;max_input_nesting_level = 64

; 可以接受多少个 GET / POST / COOKIE 输入变量
;max_input_vars = 1000

; 脚本可能消耗的最大内存量（128MB）
; http://php.net/memory-limit
memory_limit = 128M


;;;;;;;;;;;;;;;;;;
; 错误和日志处理 ;
;;;;;;;;;;;;;;;;;;

; 该指令通知PHP您希望采取的措施，错误，警告和注意事项。 
; 推荐的为此指令设置值的方法是使用错误级别常量和按位运算符。
; 为了方便起见，下面列出了错误级别常量，以及一些常用的设置及其含义。
; 默认情况下，设置为对除E_NOTICE和E_STRICT以外的所有错误、注意和警告采取措施，出于性能原因，这是建议的错误报告设置。
;
; 错误级别常数:
; E_ALL             	- 所有错误与警告 (PHP 5.4.0之后包含 E_STRICT)
; E_ERROR           	- 致命的运行时错误
; E_RECOVERABLE_ERROR  	- 几乎致命的运行时错误
; E_WARNING         	- 运行时警告 (不致命错误)
; E_PARSE           	- 编译时解析错误
; E_NOTICE          	- 注意 (通常是由代码中的错误引起的，但是有可能是故意的，例如，使用未初始化的变量)
; E_STRICT          	- 运行时通知，建议对代码进行更改，以确保代码具有最佳的操作性和向前兼容性
; E_CORE_ERROR      	- PHP初始启动期间发生的致命错误
; E_CORE_WARNING    	- PHP初始启动期间发生的警告（非致命错误）
; E_COMPILE_ERROR   	- 致命的编译时错误
; E_COMPILE_WARNING 	- 编译时警告（非致命错误）
; E_USER_ERROR      	- 用户生成的错误消息
; E_USER_WARNING    	- 用户生成的警告消息
; E_USER_NOTICE     	- 用户生成的通知消息
; E_DEPRECATED      	- 警告在将来的PHP版本中无法使用的代码
; E_USER_DEPRECATED 	- 用户生成的弃用警告
;
; 示例值:
;   E_ALL (显示所有错误，警告和注意事项，包括编码标准)
;   E_ALL & ~E_NOTICE  (显示所有错误，除非另行通知)
;   E_ALL & ~E_NOTICE & ~E_STRICT  (显示所有错误，但声明和编码标准警告除外)
;   E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR  (仅显示错误)
; 默认值: E_ALL
; 开发环境: E_ALL
; 生产环境: E_ALL & ~E_DEPRECATED & ~E_STRICT
; http://php.net/error-reporting
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT

; 该指令控制PHP是否输出错误与在哪里输出错误、通知和警告。 
; 错误输出在开发期间非常有用，但在生产环境中可能非常危险。 
; 根据触发错误的代码，敏感信息可能会从应用程序中泄漏出来，例如数据库用户名和密码，甚至更糟。
; 对于生产环境，我们建议记录错误而不是将错误发送到STDOUT。
;
; 可能的值:
;   Off = 不显示任何错误
;   stderr = 向STDERR显示错误（仅影响CGI / CLI二进制文件！）
;   On or stdout = 显示错误到STDOUT
; 默认值: On
; 开发环境: On
; 生产环境: Off
; http://php.net/display-errors
display_errors = Off

; PHP的启动序列中出现的错误的显示与display_errors分开处理。
; 强烈建议您将生产服务器的此选项设置为“关闭”，以避免泄漏配置详细信息。
; 默认值: On
; 开发环境: On
; 生产环境: Off
; http://php.net/display-startup-errors
display_startup_errors = Off

; 除了显示错误之外，PHP还可以将错误记录到位置。
; 尽管错误不应在生产服务器上显示，但仍应对其进行监视，并且日志记录是实现此目的的一种好方法。
; 默认值: Off
; 开发环境: On
; 生产环境: On
; http://php.net/log-errors
log_errors = On

; 设置log_errors的最大长度。 默认值为1024，0表示不限制。
; http://php.net/log-errors-max-len
log_errors_max_len = 1024

; 不要记录重复的消息。
; http://php.net/ignore-repeated-errors
ignore_repeated_errors = Off

; 当忽略重复的消息时，忽略消息源。 
; 当此设置为开时，您将不会记录来自不同文件或源代码行的重复消息的错误。
; http://php.net/ignore-repeated-source
ignore_repeated_source = Off

; 如果此参数设置为Off，则不会显示内存泄漏（在stdout或日志中）
; http://php.net/report-memleaks
report_memleaks = On

; 默认情况下，此设置为启用。
;report_zend_debug = 0

; 关闭正常的错误报告并发出XML-RPC错误XML
; http://php.net/xmlrpc-errors
;xmlrpc_errors = 0

; An XML-RPC faultCode
;xmlrpc_error_number = 0

; 当PHP显示或记录错误时，它具有将错误消息格式化为HTML的功能，以便于阅读。
; 该指令控制错误消息是否格式化为HTML。
; 注意：对于CLI SAPI，此伪指令被硬编码为Off。
; http://php.net/html-errors
;html_errors = On

; 如果html_errors设置为On并且docref_root不为空，则PHP会生成可点击的错误消息，这些错误消息将直接定向到描述该错误或导致该错误的函数的页面。
; 您可以从http://php.net/docs下载PHP手册的副本，并将docref_root更改为本地副本的基本URL，包括前导'/'。 
; PHP的默认行为是将这些设置留空，在这种情况下，不会生成任何指向文档的链接。
; http://php.net/docref-root
; 例子s
;docref_root = "/phpmanual/"

; http://php.net/docref-ext
;docref_ext = .html

; 错误消息之前要输出的字符串。 PHP的默认行为是将此设置保留为空白。
; http://php.net/error-prepend-string
; 例子:
;error_prepend_string = "<span style='color: #ff0000'>"

; 错误消息后输出的字符串。 PHP的默认行为是将此设置保留为空白。
; http://php.net/error-append-string
; 例子:
;error_append_string = "</span>"

; 将错误记录到指定文件。 PHP的默认行为是将此值保留为空。
; http://php.net/error-log
; 例子:
;error_log = php_errors.log
; 将错误记录到syslog（Windows上的事件日志）
;error_log = syslog

; syslog ident是一个字符串，该字符串位于记录到syslog的每条消息之前。 
; 仅在将error_log设置为syslog时使用。
;syslog.ident = php

; syslog工具用于指定记录消息的程序类型。 
; 仅在将error_log设置为syslog时使用。
;syslog.facility = user

; 设置此选项可禁用过滤控制字符（默认值）。
; 一些记录器仅接受NVT-ASCII，而另一些记录器则接受任何非控制字符的记录。 如果您的记录器接受所有内容，则根本不需要过滤。
; 允许的值:
;   ascii (所有可打印的ASCII字符和NL)
;   no-ctrl (除控制字符外的所有字符)
;   all (所有字符)
;   raw (像“全部”一样，但是消息不会在换行符之间分割)
; http://php.net/syslog.filter
;syslog.filter = ascii

; 默认值: 0
; 开发环境: 0
; 生产环境: 0
;windows.show_crt_warning


;;;;;;;;;;;;
; 数据处理 ;
;;;;;;;;;;;;

; PHP生成的URL中使用的分隔符用于分隔参数。 
; PHP的默认设置为“＆”。
; http://php.net/arg-separator.output
; 例子:
;arg_separator.output = "&amp;"

; PHP用于将输入URL解析为变量的分隔符列表。
; PHP的默认设置为“＆”。
; 注意：该指令中的每个字符都被视为分隔符！
; http://php.net/arg-separator.input
; 例子:
;arg_separator.input = ";&"

; 该指令确定PHP启动时将注册哪些超全局变量。 
; G，P，C，E和S是以下各个超级名称的缩写，全局变量：GET，POST，COOKIE，ENV和SERVER。 
; 这些超全局变量的注册会损失性能，并且由于ENV不像其他超全局变量那样普遍使用，因此不建议在生产服务器上使用ENV。 
; 如果需要，您仍然可以通过getenv（）访问环境变量。
; 默认值: "EGPCS"
; 开发环境: "GPCS"
; 生产环境: "GPCS";
; http://php.net/variables-order
variables_order = "GPCS"

; 该指令确定应将哪些超级全局数据（G，P和C）注册到超级全局数组REQUEST中。 
; 如果是这样，它还确定该数据的注册顺序。 
; 该指令的值以与variables_order指令相同的方式指定。 
; 将此值保留为空，会使PHP使用variables_order指令中设置的值。这并不意味着它将超全局数组REQUEST留为空白。
; 默认值: None
; 开发环境: "GP"
; 生产环境: "GP"
; http://php.net/request-order
request_order = "GP"

; 该指令确定PHP是否在每次运行时都注册$argv和$argc
; $argv包含调用脚本时传递给PHP的所有参数的数组。 
; $argc包含一个整数，表示调用脚本时传递的参数数量。 
; 从命令行运行脚本时，这些数组非常有用。
; 启用此伪指令后，每次执行脚本时，注册这些变量都会占用CPU周期和内存。
; 出于性能原因，应在生产服务器上禁用此功能。
; 注意：对于CLI SAPI，此伪指令被硬编码为On。
; 默认值: On
; 开发环境: Off
; 生产环境: Off
; http://php.net/register-argc-argv
register_argc_argv = Off

; 启用后，ENV，REQUEST和SERVER变量将在首次使用时（及时）创建，而不是在脚本启动时创建。
; 如果脚本中未使用这些变量，则启用此指令将提高性能。
; 必须禁用PHP指令register_argc_argv，此指令才能生效。
; http://php.net/auto-globals-jit
auto_globals_jit = On

; PHP是否将读取POST数据。
; 默认情况下启用此选项。
; 您很可能不想在全局禁用此选项。这会导致$ _POST和$ _FILES始终为空，此时能够读取POST数据的唯一方法是通过php://input流包装器。
; http://php.net/enable-post-data-reading
;enable_post_data_reading = Off

; PHP将接受的POST数据的最大大小。
; 它的值可以是0以禁用限制。 
; 如果通过enable_post_data_reading禁用了POST数据读取，则将忽略它。
; http://php.net/post-max-size
post_max_size = 8M

; 自动在PHP文档之前添加文件。
; http://php.net/auto-prepend-file
auto_prepend_file =

; 在PHP文档之后自动添加文件。
; http://php.net/auto-append-file
auto_append_file =

; 默认情况下，PHP将使用Content-Type标头输出媒体类型。
; 要禁用此功能，只需将其设置为空即可。
; PHP的内置默认媒体类型设置为text/html。
; http://php.net/default-mimetype
default_mimetype = "text/html"

; PHP的默认字符集设置为UTF-8。
; http://php.net/default-charset
default_charset = "UTF-8"

; PHP内部字符编码设置为空。
; 如果为空，则使用default_charset。
; http://php.net/internal-encoding
;internal_encoding =

; PHP输入字符编码设置为空。
; 如果为空，则使用default_charset。
; http://php.net/input-encoding
;input_encoding =

; PHP输出字符编码设置为空。
; 如果为空，则使用default_charset。
; 另请参见output_buffer。
; http://php.net/output-encoding
;output_encoding =


;;;;;;;;;;;;;;
; 路径和目录 ;
;;;;;;;;;;;;;;

; UNIX: "/path1:/path2"
;include_path = ".:/php/includes"
;
; Windows: "\path1;\path2"
;include_path = ".;c:\php\includes"
;
; include_path 默认的值是 ".;/path/to/php/pear"
; http://php.net/include-path

; PHP页面的根目录，仅在非空时使用。
; 如果PHP不是使用FORCE_REDIRECT编译的，则应设置doc_root
; 如果您在任何Web服务器（IIS除外）下将php作为CGI运行，请参阅文档以了解安全性问题。  
; 另一种方法是使用下面的cgi.force_redirect配置
; http://php.net/doc-root
doc_root =

; PHP使用/~用户名打开脚本的目录，该目录仅在非空时使用。
; http://php.net/user-dir
user_dir =

; 可加载的扩展（模块）所在的目录。
; http://php.net/extension-dir
;extension_dir = "./"
; On windows:
;extension_dir = "ext"

; 放置临时文件的目录。
; 默认为系统默认值（请参阅sys_get_temp_dir）
;sys_temp_dir = "/tmp"

; 是否启用dl()函数。  
; dl（）函数在多线程服务器（例如IIS或Zeus）中无法正常工作，并在它们上自动被禁用。
; http://php.net/enable-dl
enable_dl = Off

; cgi.force_redirect是必需的，以提供在大多数Web服务器下将PHP作为CGI运行的安全性。
; PHP默认情况下将其打开。 
; 您可以自行承担将其关闭的风险
; **实际上，您必须为IIS安全地关闭此功能。**
; http://php.net/cgi.force-redirect
;cgi.force_redirect = 1

; 如果启用了cgi.nph，它将强制cgi始终发送状态：每个请求200。 
; PHP的默认行为是禁用此功能。
;cgi.nph = 1

; 如启用了cgi.force_redirect, 您未在Apache或Netscape（iPlanet）Web服务器下运行，则可能需要设置一个环境变量名，PHP将查找该环境变量名以知道可以继续执行。
; 设置此变量可能会导致安全问题，请首先了解您要做什么。
; http://php.net/cgi.redirect-status-env
;cgi.redirect_status_env =

; cgi.fix_pathinfo为CGI提供*真实* PATH_INFO/PATH_TRANSLATED支持。  
; PHP的先前行为是将PATH_TRANSLATED设置为SCRIPT_FILENAME，并且不获取PATH_INFO是什么。
; 有关PATH_INFO的更多信息，请参见cgi规范。  
; 将此设置为1将导致PHP CGI修复其路径以符合规范。  
; 设置为零会导致PHP像以前一样运行。  
; 默认值为1。
; 您应该修复脚本以使用SCRIPT_FILENAME而不是PATH_TRANSLATED。
; http://php.net/cgi.fix-pathinfo
;cgi.fix_pathinfo=1

; 如果启用cgi.discard_path，则可以将PHP CGI二进制文件安全地放置在Web树之外，并且人们将无法规避.htaccess安全性。
;cgi.discard_path=1

; IIS下的FastCGI支持模拟调用客户端的安全令牌的功能。这使IIS可以定义在其下运行请求的安全上下文。  
; Apache下的mod_fastcgi当前不支持此功能，如果在IIS下运行，则设置为1。 
; 默认值为零。
; http://php.net/fastcgi.impersonate
;fastcgi.impersonate = 1

; 通过FastCGI连接禁用日志记录。 PHP的默认行为是启用此功能。
;fastcgi.logging = 0

; cgi.rfc2616_headers配置选项告诉PHP在发送HTTP响应代码时使用哪种类型的头。 
; 如果设置为0，PHP将发送Apache支持的Status:标头。
; 当此选项设置为1时，PHP将发送符合RFC2616的标头。
; 默认值为零。
; http://php.net/cgi.rfc2616-headers
;cgi.rfc2616_headers = 0

; cgi.check_shebang_line控制CGI PHP是否检查运行脚本的顶部以#开头的行.
; 如果脚本支持既作为独立脚本又通过PHP CGI <运行，则可能需要此行。 
; 如果启用了此指令，则处于CGI模式的PHP将跳过此行，并忽略其内容。
; http://php.net/cgi.check-shebang-line
;cgi.check_shebang_line=1


;;;;;;;;;;;;
; 文件上传 ;
;;;;;;;;;;;;

; 是否允许HTTP文件上传。
; http://php.net/file-uploads
file_uploads = On

; HTTP上传文件的临时目录（如果未指定，将使用系统默认值）。
; http://php.net/upload-tmp-dir
;upload_tmp_dir =

; 上载文件的最大允许大小。
; http://php.net/upload-max-filesize
upload_max_filesize = 2M

; 通过单个请求可以上传的最大文件数。
max_file_uploads = 20

;;;;;;;;;;;;;;;;;;
; Fopen wrappers ;
;;;;;;;;;;;;;;;;;;

; 是否允许将URL（例如http://或ftp://）视为文件。
; http://php.net/allow-url-fopen
allow_url_fopen = On

; 是否允许包含/需要打开URL（例如http://或ftp://）作为文件。
; http://php.net/allow-url-include
allow_url_include = Off

; 定义匿名ftp密码（您的电子邮件地址）。 
; PHP的默认设置为空。
; http://php.net/from
;from="john@doe.com"

; 定义用户代理字符串。 
; PHP的默认设置为空。
; http://php.net/user-agent
;user_agent="PHP"

; 基于套接字的流的默认超时（秒）
; http://php.net/default-socket-timeout
default_socket_timeout = 60

; 如果您的脚本必须处理Macintosh系统中的文件，或者您正在Mac上运行，
; 并且需要处理unix或win32系统中的文件，则设置此标志将使PHP自动检测这些文件中的EOL字符，
; 以便fgets（ ）和file（）将起作用，而不管文件的来源。
; http://php.net/auto-detect-line-endings
;auto_detect_line_endings = Off


;;;;;;;;;;;;
; 动态扩展 ;
;;;;;;;;;;;;

; 如果您希望自动加载扩展程序，请使用以下命令
; 语法:
;   extension=modulename
; 例子:
;   extension=mysqli
; 当要加载的扩展库不在默认扩展目录中时，您可以指定库文件的绝对路径:
;   extension=/path/to/extension/mysqli.so
;
; 注意: 出于遗留原因，支持以前的PHP版本中使用的语法（“ extension = <ext> .so”和“ extension ='php_ <ext> .dll”），
; 并且在以后的PHP主版本中可能会弃用该语法。因此，请尽可能使用新的（'extension = <ext>）语法。
; 
;extension=bz2
;extension=curl
;extension=ffi
;extension=fileinfo
;extension=gd2
;extension=gettext
;extension=gmp
;extension=intl
;extension=imap
;extension=ldap
;extension=mbstring
;extension=exif      ; 必须在mbstring之后，因为这依赖于它
;extension=mysqli
;extension=oci8_12c  ; 与Oracle Database 12c Instant Client一起使用
;extension=odbc
;extension=openssl
;extension=pdo_firebird
;extension=pdo_mysql
;extension=pdo_oci
;extension=pdo_odbc
;extension=pdo_pgsql
;extension=pdo_sqlite
;extension=pgsql
;extension=shmop

; 必须安装PHP发行版中可用的MIBS数据。
; See http://www.php.net/manual/en/snmp.installation.php
;extension=snmp

;extension=soap
;extension=sockets
;extension=sodium
;extension=sqlite3
;extension=tidy
;extension=xmlrpc
;extension=xsl


;;;;;;;;;;;;
; 模块设置 ;
;;;;;;;;;;;;

[CLI Server]
; CLI Web服务器是否在其终端输出中使用ANSI颜色编码。
cli_server.color = On

[Date]
; 定义日期函数使用的默认时区
; http://php.net/date.timezone
;date.timezone =

; http://php.net/date.default-latitude
;date.default_latitude = 31.7667

; http://php.net/date.default-longitude
;date.default_longitude = 35.2333

; http://php.net/date.sunrise-zenith
;date.sunrise_zenith = 90.833333

; http://php.net/date.sunset-zenith
;date.sunset_zenith = 90.833333

[filter]
; http://php.net/filter.default
;filter.default = unsafe_raw

; http://php.net/filter.default-flags
;filter.default_flags =

[iconv]
; 不建议使用此INI条目，而应使用global input_encoding
; 如果为空，则使用default_charset或input_encoding或iconv.input_encoding
; 优先级为: default_charset < input_encoding < iconv.input_encoding
;iconv.input_encoding =

; 不建议使用此INI条目，而应使用global internal_encoding
; 如果为空，则使用default_charset或internal_encoding或iconv.internal_encoding
; 优先级为: default_charset < internal_encoding < iconv.internal_encoding
;iconv.internal_encoding =

; 不建议使用此INI条目，而应使用全局output_encoding。
; 如果为空，则使用default_charset或output_encoding或iconv.output_encoding
; 优先级为: default_charset < output_encoding < iconv.output_encoding
; 要使用输出编码转换，必须设置iconv的输出处理程序，否则无法执行输出编码转换。
;iconv.output_encoding =

[imap]
; 默认情况下，禁用rsh/ssh登录。 
; 如果要启用它们，请使用此INI条目。
; 请注意，在将邮箱名称传递给rsh/ssh命令之前，IMAP库不会对其进行过滤，因此在启用rsh/ssh的情况下，将不受信任的数据传递至此函数是不安全的。
;imap.enable_insecure_rsh=0

[intl]
;intl.default_locale =
; 当intl函数中发生某些错误时，此指令允许您产生PHP错误。 
; 该值是产生的错误级别。
；默认值为0，不会产生任何错误。
;intl.error_level = E_WARNING
;intl.use_exceptions = 0

[sqlite3]
; 指向SQLite3扩展的目录
; http://php.net/sqlite3.extension-dir
;sqlite3.extension_dir =

; SQLite防御模式标志（仅从SQLite 3.26+起可用）当启用防御标志时，将禁用允许普通SQL故意破坏数据库文件的语言功能。 
; 这禁止直接写入架构，影子表（例如FTS数据表）或sqlite_dbpage虚拟表。
; (对于较旧的SQLite版本，此标志没有用)
; https://www.sqlite.org/c3ref/c_dbconfig_defensive.html
;sqlite3.defensive = 1

[Pcre]
; PCRE库回溯限制。
; http://php.net/pcre.backtrack-limit
;pcre.backtrack_limit=100000

; PCRE库递归限制。
; 请注意，如果将此值设置为较高的值，则可能会消耗所有可用的进程堆栈，并最终导致PHP崩溃（由于达到操作系统施加的堆栈大小限制）。
; http://php.net/pcre.recursion-limit
;pcre.recursion_limit=100000

; 启用或禁用JIT模式编译。 这要求PCRE库在JIT支持下进行编译。
;pcre.jit=1

[Pdo]
; 是否合并ODBC连接。 可以是“strict”，“relaxed”或“off”之一
; http://php.net/pdo-odbc.connection-pooling
;pdo_odbc.connection_pooling=strict

[Pdo_mysql]
; 本地MySQL连接的默认套接字名称。 
; 如果为空，则使用内置的MySQL默认值。
pdo_mysql.default_socket=

[Phar]
; http://php.net/phar.readonly
;phar.readonly = On

; http://php.net/phar.require-hash
;phar.require_hash = On

;phar.cache_list =

[mail function]
; 仅适用于Win32。
; http://php.net/smtp
SMTP = localhost
; http://php.net/smtp-port
smtp_port = 25

; 仅适用于Win32。
; http://php.net/sendmail-from
;sendmail_from = me@例子.com

; 仅适用于Unix。 您也可以提供参数（默认值：“sendmail -t -i”）
; http://php.net/sendmail-path
;sendmail_path =

; 强制将指定参数的添加作为额外参数传递给sendmail二进制文件。 这些参数将始终替换mail（）的第5个参数的值。
;mail.force_extra_parameters =

; 添加X-PHP-Originating-Script：它将包含脚本的uid和文件名
mail.add_x_header = Off

; 将记录所有mail（）调用的日志文件的路径。 日志条目包括脚本的完整路径，行号，收件人地址和标题。
;mail.log =
; 将邮件记录到syslog（Windows上的事件日志）
;mail.log = syslog

[ODBC]
; http://php.net/odbc.default-db
;odbc.default_db    =  Not yet implemented

; http://php.net/odbc.default-user
;odbc.default_user  =  Not yet implemented

; http://php.net/odbc.default-pw
;odbc.default_pw    =  Not yet implemented

; 控制ODBC游标模型。
; 默认值：SQL_CURSOR_STATIC
;odbc.default_cursortype

; 允许或阻止持久链接。
; http://php.net/odbc.allow-persistent
odbc.allow_persistent = On

; 重用之前，请检查连接是否仍然有效。
; http://php.net/odbc.check-persistent
odbc.check_persistent = On

; 永久链接的最大数量。 -1表示没有限制。
; http://php.net/odbc.max-persistent
odbc.max_persistent = -1

; 链接的最大数量（永久+非永久）。 -1表示没有限制。
; http://php.net/odbc.max-links
odbc.max_links = -1

; 处理长字段。 返回变量的字节数。 0表示直通。
; http://php.net/odbc.defaultlrl
odbc.defaultlrl = 4096

; 处理二进制数据。 0表示直通，1表示原样返回，2表示转换为char
; http://php.net/odbc.defaultbinmode
odbc.defaultbinmode = 1

[MySQLi]

; 永久链接的最大数量。 -1表示没有限制。
; http://php.net/mysqli.max-persistent
mysqli.max_persistent = -1

; 从PHP的角度来看，允许使用LOAD DATA语句访问本地文件
; http://php.net/mysqli.allow_local_infile
;mysqli.allow_local_infile = On

; 允许或阻止持久链接。
; http://php.net/mysqli.allow-persistent
mysqli.allow_persistent = On

; 最大链接数。 -1表示没有限制。
; http://php.net/mysqli.max-links
mysqli.max_links = -1

; mysqli_connect（）的默认端口号。  
; 如果未设置，则mysqli_connect()将使用$ MYSQL_TCP_PORT或/etc/services中的mysql-tcp条目，或使用MYSQL_PORT定义的编译时值（按此顺序）。
; http://php.net/mysqli.default-port
mysqli.default_port = 3306

; 本地MySQL连接的默认套接字名称。 如果为空，则使用内置的MySQL默认值。
; http://php.net/mysqli.default-socket
mysqli.default_socket =

; mysqli_connect（）的默认主机（不适用于安全模式）。
; http://php.net/mysqli.default-host
mysqli.default_host =

; mysqli_connect（）的默认用户（不适用于安全模式）。
; http://php.net/mysqli.default-user
mysqli.default_user =

; mysqli_connect（）的默认密码（不适用于安全模式）。
; 请注意，在这里存储密码是一个很坏主意。
; http://php.net/mysqli.default-pw
mysqli.default_pw =

; 允许或阻止重新连接
mysqli.reconnect = Off

[mysqlnd]
; 通过mysqlnd启用/禁用常规统计信息收集，可用于调整和监视MySQL操作。
mysqlnd.collect_statistics = On

; 通过mysqlnd启用/禁用内存使用情况统计信息收集，可用于调整和监视MySQL操作。
mysqlnd.collect_memory_statistics = Off

; 使用mysqlnd将所有扩展的通讯记录到指定的日志文件中。
; http://php.net/mysqlnd.debug
;mysqlnd.debug =

; 定义将记录哪些查询。
;mysqlnd.log_mask = 0

; mysqlnd内存池的默认大小，由结果集使用。
;mysqlnd.mempool_default_size = 16000

; 向MySQL发送命令时使用的预分配缓冲区的大小（以字节为单位）
;mysqlnd.net_cmd_buffer_size = 2048

; 用于读取服务器发送的数据的预分配缓冲区的大小（以字节为单位）
;mysqlnd.net_read_buffer_size = 32768

; 网络读请求超时（以秒为单位）。
;mysqlnd.net_read_timeout = 31536000

; 与SHA-256身份验证插件有关。 使用MySQL服务器公共RSA密钥的文件。
;mysqlnd.sha256_server_public_key =

[OCI8]

; 连接：使用外部凭据（OCI_SYSOPER，OCI_SYSDBA）启用特权连接
; http://php.net/oci8.privileged-connect
;oci8.privileged_connect = Off

; 连接：每个进程的最大持续OCI8连接数。 使用-1表示没有限制。
; http://php.net/oci8.max-persistent
;oci8.max_persistent = -1

; 连接：允许进程维护空闲持久连接的最大秒数。 
; 使用-1表示空闲的持久连接将被永久维护。
; http://php.net/oci8.persistent-timeout
;oci8.persistent_timeout = -1

; 连接：在oci_pconnect()期间发出ping命令以检查连接有效性之前必须经过的秒数。 
; 设置为0时，每个oci_connect()都会导致ping。 
; 使用-1完全禁用ping。
; http://php.net/oci8.ping-interval
;oci8.ping_interval = 60

; 连接：将此设置为用户选择的连接类别，该类别将用于Oracle 11g数据库常驻连接池（DRCP）的所有池服务器请求。  
; 要使用DRCP，对于运行相同应用程序的所有Web服务器，应将此值设置为相同的字符串，必须配置数据库池，并且连接字符串必须指定为使用池化服务器。
;oci8.connection_class =

; 高可用性：使用On可使PHP接收数据库节点发生故障时生成的快速应用程序通知（FAN）事件。 
; 数据库也必须配置为发布FAN事件。
;oci8.events = Off

; 调整：此选项启用语句缓存，并指定要缓存的语句数。 
; 使用0将禁用语句缓存。
; http://php.net/oci8.statement-cache-size
;oci8.statement_cache_size = 20

; 调整：启用语句预取并设置语句执行后将自动获取的默认行数。
; http://php.net/oci8.default-prefetch
;oci8.default_prefetch = 100

; 兼容性。 
; 使用On表示oci_close()将不会关闭oci_connect()和oci_new_connect()连接。
; http://php.net/oci8.old-oci-close-semantics
;oci8.old_oci_close_semantics = Off

[PostgreSQL]
; 允许或阻止持久链接。
; http://php.net/pgsql.allow-persistent
pgsql.allow_persistent = On

; 始终使用pg_pconnect()检测断开的持久链接。
; 自动重置功能需要一点开销。
; http://php.net/pgsql.auto-reset-persistent
pgsql.auto_reset_persistent = Off

; 永久链接的最大数量。 
; -1表示没有限制。
; http://php.net/pgsql.max-persistent
pgsql.max_persistent = -1

; 链接的最大数量（持久+非持久）。
; -1表示没有限制。
; http://php.net/pgsql.max-links
pgsql.max_links = -1

; 是否忽略PostgreSQL后端注意消息。
; 注意消息日志记录需要一些开销。
; http://php.net/pgsql.ignore-notice
pgsql.ignore_notice = 0

; 是否记录PostgreSQL后端通知消息。
; 除非pgsql.ignore_notice = 0，否则模块无法记录通知消息。
; http://php.net/pgsql.log-notice
pgsql.log_notice = 0

[bcmath]
; 所有bcmath函数的小数位数。
; http://php.net/bcmath.scale
bcmath.scale = 0

[browscap]
; http://php.net/browscap
;browscap = extra/browscap.ini

[Session]
; 用于存储/检索数据的处理程序。
; http://php.net/session.save-handler
session.save_handler = files

; 参数传递给save_handler。  
; 对于文件，这是存储数据文件的路径。 
; 注意：Windows用户必须更改此变量才能使用PHP会话功能。
;
; 路径可以定义为:
;     session.save_path = "N;/path"
;
; 其中N是整数。 
; 与其将所有会话文件存储在/path中，不如使用N级子目录，并将会话数据存储在这些目录中。  
; 如果您的操作系统在一个目录中存在许多文件问题，并且对处理多个会话的服务器来说是一种更有效的布局，则这很有用。
;
; NOTE 1: PHP不会自动创建此目录结构。 
; NOTE 2: 如果您选择使用子目录进行会话存储，请参见下面有关垃圾回收的部分。
;
; http://php.net/session.save-path
;session.save_path = "/tmp"

; 是否使用严格的会话模式。
; 严格会话模式不接受未初始化的会话ID，并且如果浏览器发送未初始化的会话ID，则重新生成会话ID。
; 严格模式通过会话采用漏洞保护应用程序免于会话固定。 
; 为了最大程度地兼容，默认情况下禁用该功能，但建议启用它。
; https://wiki.php.net/rfc/strict_sessions
session.use_strict_mode = 0

; 是否使用cookie。
; http://php.net/session.use-cookies
session.use_cookies = 1

; http://php.net/session.cookie-secure
;session.cookie_secure =

; 此选项强制PHP获取和使用cookie来存储和维护会话ID。 
; 我们鼓励执行此操作，因为它在不指定和管理您自己的会话ID时对打击会话劫持非常有帮助。 
; 这不是会话劫持防御的全部，也是一个好的开始。
; http://php.net/session.use-only-cookies
session.use_only_cookies = 1

; 会话名称（用作cookie名称）。
; http://php.net/session.name
session.name = PHPSESSID

; 在请求启动时初始化会话。
; http://php.net/session.auto-start
session.auto_start = 0

; Cookie的生存时间（以秒为单位），如果没有，则为0，直到重启浏览器为止。
; http://php.net/session.cookie-lifetime
session.cookie_lifetime = 0

; Cookie有效的路径。
; http://php.net/session.cookie-path
session.cookie_path = /

; Cookie对其有效的域。
; http://php.net/session.cookie-domain
session.cookie_domain =

; 是否将httpOnly标志添加到cookie，这使得浏览器脚本语言（例如JavaScript）无法访问它。
; http://php.net/session.cookie-httponly
session.cookie_httponly =

; 将SameSite属性添加到cookie以帮助缓解跨站点请求伪造（CSRF/XSRF）当前有效值为“Lax”或“Strict”
; https://tools.ietf.org/html/draft-west-first-party-cookies-07
session.cookie_samesite =

; 用于序列化数据的处理程序。 
; php是PHP的标准序列化器。
; http://php.net/session.serialize-handler
session.serialize_handler = php

; 定义在每次会话初始化时启动“垃圾收集”过程的可能性。通过使用gc_probability/gc_divisor计算概率。其中session.gc_probability是分子，而gc_divisor是等式中的分母。
; 在session.gc_divisor值为100时将此值设置为1，将使gc在任何给定请求上运行的可能性大约为1％。
; 默认值: 1
; 开发环境: 1
; 生产环境: 1
; http://php.net/session.gc-probability
session.gc_probability = 1

; 定义在每次会话初始化时启动“垃圾收集”过程的可能性。通过使用以下公式计算概率：gc_probability/gc_divisor。 其中session.gc_probability是分子，
; 在session.gc_probability值为1时将此值设置为100，将使gc在任何给定请求上运行的可能性大约为1％。 
; 将该值增加到1000，将使gc在任何给定请求上运行的可能性为0.1％。 对于批量生产的服务器，这是一种更有效的方法。
; 默认值: 100
; 开发环境: 1000
; 生产环境: 1000
; http://php.net/session.gc-divisor
session.gc_divisor = 1000

; 在此秒数之后，存储的数据将被视为“垃圾”，并由垃圾收集过程清除。
; http://php.net/session.gc-maxlifetime
session.gc_maxlifetime = 1440

; NOTE: 如果您使用子目录选项来存储会话文件（请参见上面的session.save_path），那么垃圾回收不会自动发生。
;		您将需要通过shell脚本，cron条目或其他方法来进行自己的垃圾收集。
;       举个例子, 
;		以下脚本等效于将session.gc_maxlifetime设置为1440（1440秒= 24分钟）: find/path/to/sessions-cmin+24-type f | xargs rm

; 选中HTTP Referer，以使包含ID的外部存储URL无效。
; HTTP_REFERER必须包含此子字符串，会话才能被视为有效。
; http://php.net/session.referer-check
session.referer_check =

; 设置为{nocache，private，public}以确定HTTP缓存方面，或将其保留为空以避免发送反缓存标头。
; http://php.net/session.cache-limiter
session.cache_limiter = nocache

; 文档在n分钟后过期。
; http://php.net/session.cache-expire
session.cache_expire = 180

; 默认情况下，use_trans_sid支持处于禁用状态。
; 使用trans_sid可能会危及用户的安全。
; 请谨慎使用此选项。
; - 用户可能发送包含活动会话ID的URL通过。电子邮件/irc/etc。
; - 包含活动会话ID的URL可以存储在可公开访问的计算机中。
; - 用户可以始终使用存储在浏览器历史记录或书签中的URL使用相同的会话ID访问您的网站。
; http://php.net/session.use-trans-sid
session.use_trans_sid = 0

; 设置会话ID的字符长度。 该值可以在22到256之间。
; 仅出于兼容性原因，才支持比默认长度短的长度。
; 用户应使用32个或更多字符。
; http://php.net/session.sid-length
; 默认值: 32
; 开发环境: 26
; 生产环境: 26
session.sid_length = 26

; URL重写器将在一组定义的HTML标签中查找URL。
; <form>是特殊的； 如果您在此处包括它们，重写器将添加一个隐藏的<input>字段，其中包含附加到URL上的信息。
; 除非指定<form>标记的操作属性URL，否则不会对其进行修改。
; 请注意，即使后面没有任何值，所有有效的条目也都需要一个“=”。
; 默认值: "a=href,area=href,frame=src,form="
; 开发环境: "a=href,area=href,frame=src,form="
; 生产环境: "a=href,area=href,frame=src,form="
; http://php.net/url-rewriter.tags
session.trans_sid_tags = "a=href,area=href,frame=src,form="

; 默认情况下，URL重写器不会重写绝对URL。
; 要启用绝对路径的重写，必须在运行时指定目标主机。
; <form>标记很特殊。 无论session.trans_sid_tags设置如何，PHP都会检查操作属性的URL。
; 如果未定义主机，则HTTP_HOST将用于允许的主机。
; 例子: php.net,www.php.net,wiki.php.net 对多个主机使用“，”。 不允许有空格。
; 默认值: ""
; 开发环境: ""
; 生产环境: ""
;session.trans_sid_hosts=""

; 定义将二进制哈希数据转换为可读性时每个字符中存储多少位。
; Possible values:
;   4  (4 bits: 0-9, a-f)
;   5  (5 bits: 0-9, a-v)
;   6  (6 bits: 0-9, a-z, A-Z, "-", ",")
; 默认值: 4
; 开发环境: 5
; 生产环境: 5
; http://php.net/session.hash-bits-per-character
session.sid_bits_per_character = 5

; 在$_SESSION中启用上传进度跟踪
; 默认值: On
; 开发环境: On
; 生产环境: On
; http://php.net/session.upload-progress.enabled
;session.upload_progress.enabled = On

; 读取所有POST数据（即完成上传）后，立即清理进度信息。
; 默认值: On
; 开发环境: On
; 生产环境: On
; http://php.net/session.upload-progress.cleanup
;session.upload_progress.cleanup = On

; $_SESSION中用于上传进度键的前缀
; 默认值: "upload_progress_"
; 开发环境: "upload_progress_"
; 生产环境: "upload_progress_"
; http://php.net/session.upload-progress.prefix
;session.upload_progress.prefix = "upload_progress_"

; $_SESSION中的索引名称（与前缀连接）
; 包含上传进度信息
; 默认值: "PHP_SESSION_UPLOAD_PROGRESS"
; 开发环境: "PHP_SESSION_UPLOAD_PROGRESS"
; 生产环境: "PHP_SESSION_UPLOAD_PROGRESS"
; http://php.net/session.upload-progress.name
;session.upload_progress.name = "PHP_SESSION_UPLOAD_PROGRESS"

; 上传进度应多久更新一次。
; 以百分比（每个文件）或字节为单位
; 默认值: "1%"
; 开发环境: "1%"
; 生产环境: "1%"
; http://php.net/session.upload-progress.freq
;session.upload_progress.freq =  "1%"

; 更新之间的最小延迟（以秒为单位）
; 默认值: 1
; 开发环境: 1
; 生产环境: 1
; http://php.net/session.upload-progress.min-freq
;session.upload_progress.min_freq = "1"

; 仅在更改会话数据时才写入会话数据。 默认启用。
; http://php.net/session.lazy-write
;session.lazy_write = On

[Assertion]
; 切换是否完全编译断言（运行时无开销）
; -1: Do not compile at all
;  0: Jump over assertion at run-time
;  1: Execute assertions
; Changing from or to a negative value is only possible in php.ini! (For turning assertions on and off at run-time, see assert.active, when zend.assertions = 1)
; 默认值: 1
; 开发环境: 1
; 生产环境: -1
; http://php.net/zend.assertions
zend.assertions = -1

; 断言（expr）; 默认情况下处于活动状态。
; http://php.net/assert.active
;assert.active = On

;在失败的断言上抛出AssertionError
; http://php.net/assert.exception
;assert.exception = On

; 为每个失败的断言发出PHP警告。 （如果被激活，则由assert.exception覆盖）
; http://php.net/assert.warning
;assert.warning = On

; 默认情况下不要更改。
; http://php.net/assert.bail
;assert.bail = Off

; 断言失败时要调用的函数。
; http://php.net/assert.callback
;assert.callback = 0

[COM]
; 包含具有TypeLibs的文件的GUID，IID或文件名的文件的路径
; http://php.net/com.typelib-file
;com.typelib_file =

; 允许分布式COM调用
; http://php.net/com.allow-dcom
;com.allow_dcom = true

; 在com_load()上自动注册组件的typelib常量
; http://php.net/com.autoregister-typelib
;com.autoregister_typelib = true

; 寄存器常量区分大小写
; http://php.net/com.autoregister-casesensitive
;com.autoregister_casesensitive = false

; 在重复的常量注册上显示警告
; http://php.net/com.autoregister-verbose
;com.autoregister_verbose = true

; 与COM对象之间传递字符串时使用的默认字符集代码页。
; Default: system ANSI code page
;com.code_page=

[mbstring]
; 内部字符表示的语言。
; 这会影响mb_send_mail()和mbstring.detect_order。
; http://php.net/mbstring.language
;mbstring.language = Japanese

; 不建议使用此INI条目，而应使用global internal_encoding
; 如果为空，则使用default_charset或internal_encoding或iconv.internal_encoding。
; 优先级为：default_charset < internal_encoding < iconv.internal_encoding
;mbstring.internal_encoding =

; 不建议使用此INI条目，而应使用global input_encoding。
; http输入编码。
; mbstring.encoding_translation = 需要使用此设置。
; 如果为空，则使用default_charset或input_encoding或mbstring.input。
; 优先级为：default_charset < input_encoding < mbstring.http_input
; http://php.net/mbstring.http-input
;mbstring.http_input =

; 不建议使用此INI条目，而应使用全局output_encoding。
; mb_output_handler必须注册为输出缓冲区才能起作用。
; 如果为空，则使用default_charset或output_encoding或mbstring.http_output。
; 优先级为：default_charset < output_encoding < mbstring.http_output
; 要使用输出编码转换，必须设置mbstring的输出处理程序，否则无法执行输出编码转换。
; http://php.net/mbstring.http-output
;mbstring.http_output =

; 根据mbstring.internal_encoding设置启用自动编码转换。 
; 通过将输入字符设置为开将其转换为内部编码。
; Note: 不要对可移植的库/应用程序使用自动编码转换。
; http://php.net/mbstring.encoding-translation
;mbstring.encoding_translation = Off

; 自动编码检测顺序。
; http://php.net/mbstring.detect-order
;mbstring.detect_order = auto

; 无法将字符彼此转换时使用的replace_character
; http://php.net/mbstring.substitute-character
;mbstring.substitute_character = none

; 启用严格的编码检测。
; 默认值：Off
;mbstring.strict_detection = On

; 此伪指令指定激活了mb_output_handler()的内容类型的正则表达式模式。
; Default: mbstring.http_output_conv_mimetype=^(text/|application/xhtml\+xml)
;mbstring.http_output_conv_mimetype=

; 该指令为mbstring正则表达式指定最大堆栈深度。 它类似于PCRE的pcre.recursion_limit。
; Default: 100000
;mbstring.regex_stack_limit=100000

; 此伪指令指定mbstring正则表达式的最大重试计数。 它类似于PCRE的pcre.backtrack_limit。
; Default: 1000000
;mbstring.regex_retry_limit=1000000

[gd]
; 告诉jpeg解码忽略警告并尝试创建gd图像。 
; 该警告将默认显示为禁用通知
; http://php.net/gd.jpeg-ignore-warning
;gd.jpeg_ignore_warning = 1

[exif]
; Exif UNICODE user comments are handled as UCS-2BE/UCS-2LE and JIS as JIS.
; With mbstring support this will automatically be converted into the encoding
; given by corresponding encode setting. When empty mbstring.internal_encoding
; is used. For the decode settings you can distinguish between motorola and
; intel byte order. A decode setting cannot be empty.
; http://php.net/exif.encode-unicode
;exif.encode_unicode = ISO-8859-15

; http://php.net/exif.decode-unicode-motorola
;exif.decode_unicode_motorola = UCS-2BE

; http://php.net/exif.decode-unicode-intel
;exif.decode_unicode_intel    = UCS-2LE

; http://php.net/exif.encode-jis
;exif.encode_jis =

; http://php.net/exif.decode-jis-motorola
;exif.decode_jis_motorola = JIS

; http://php.net/exif.decode-jis-intel
;exif.decode_jis_intel    = JIS

[Tidy]
; 使用tidy时要使用的默认tidy配置文件的路径
; http://php.net/tidy.default-config
;tidy.default_config = /usr/local/lib/php/default.tcfg

; 是否应该整理整洁并自动修复输出？
; 警告：如果要生成非HTML内容（例如动态图像），请不要使用此选项
; http://php.net/tidy.clean-output
tidy.clean_output = Off

[soap]
; 启用或禁用WSDL缓存功能。
; http://php.net/soap.wsdl-cache-enabled
soap.wsdl_cache_enabled=1

; 设置SOAP扩展将缓存文件放入的目录名称。
; http://php.net/soap.wsdl-cache-dir
soap.wsdl_cache_dir="/tmp"

;（生存时间）设置将使用缓存文件而不是原始文件的秒数。
; http://php.net/soap.wsdl-cache-ttl
soap.wsdl_cache_ttl=86400

; 要缓存的WSDL文件的最大数量。
soap.wsdl_cache_limit = 5

[sysvshm]
; 共享内存段的默认大小
;sysvshm.init_mem = 10000

[ldap]
; 设置打开链接的最大数量，或设置为-1（无限制）。
ldap.max_links = -1

[dba]
;dba.default_handler=

[opcache]
; 确定是否启用Zend OPCache
;opcache.enable=1

; 确定是否为PHP的CLI版本启用了Zend OPCache
;opcache.enable_cli=0

; OPcache共享内存的存储大小。
;opcache.memory_consumption=128

; 内联字符串的内存量（以兆字节为单位）。
;opcache.interned_strings_buffer=8

; OPcache哈希表中的最大键（脚本）数。
; 仅允许使用200到1000000之间的数字。
;opcache.max_accelerated_files=10000

; 在计划重新启动之前，“已浪费”内存的最大百分比。
;opcache.max_wasted_percentage=5

; 启用此指令后，OPcache会将当前工作目录附加到脚本键，从而消除了具有相同名称（基名）的文件之间可能发生的冲突。 
; 禁用指令可以提高性能，但可能会破坏现有的应用程序。
;opcache.use_cwd=1

; 禁用后，必须手动重置OPcache或重新启动Web服务器，以使对文件系统的更改生效。
;opcache.validate_timestamps=1

; 检查文件时间戳以查看共享内存存储分配更改的频率（以秒为单位）。（“1”表示每秒验证一次，但每个请求仅一次。“0”表示始终验证）
;opcache.revalidate_freq=2

; 在include_path优化中启用或禁用文件搜索
;opcache.revalidate_path=0

; 如果禁用，则会从代码中删除所有PHPDoc注释，以减小优化代码的大小。
;opcache.save_comments=1

; 允许文件存在覆盖（file_exists等）性能功能。
;opcache.enable_file_override=0

; 位掩码，其中每个位启用或禁用适当的OPcache传递
;opcache.optimization_level=0x7FFFBFFF

;opcache.dups_fix=0

; OPcache黑名单文件的位置（允许使用通配符）。
;opcache.blacklist_filename=

; 允许从缓存中排除大型文件。 默认情况下，所有文件都被缓存。
;opcache.max_file_size=0

; 每N个请求检查一次缓存校验和。
; 默认值“ 0”表示禁用检查。
;opcache.consistency_checks=0

; 如果未访问缓存，则要等待多长时间（以秒为单位）以开始计划的重新启动。
;opcache.force_restart_timeout=180

; OPcache error_log文件名。 
; 空字符串假定为“ stderr”。
;opcache.error_log=

; 所有OPcache错误都转到Web服务器日志中。 
; 默认情况下，仅记录致命错误（级别0）或错误（级别1）。
; 您还可以启用warnings（级别2），info messages（级别3）或 debug messages（级别4）。
;opcache.log_verbosity_level=1

; 首选共享内存后端。 
; 留空，让系统决定。
;opcache.preferred_memory_model=

; 在脚本执行期间保护共享内存，防止意外写入。
; 仅对内部调试有用。
;opcache.protect_memory=0

; 仅允许从PHP脚本（其路径从指定的字符串开始）调用OPcache API函数。
; 默认的“”表示没有限制
;opcache.restrict_api=

; 共享内存段的映射基础（仅适用于Windows）。
; 所有PHP进程都必须将共享内存映射到相同的地址空间。 This
; 所有PHP进程都必须将共享内存映射到相同的地址空间。
;opcache.mmap_base=

; 为每个用户提供多个OPcache实例（仅适用于Windows）。 
; 具有相同缓存ID和用户的所有PHP进程共享一个OPcache实例。
;opcache.cache_id=

; 启用并设置二级缓存目录。
; SHM内存已满，服务器重新启动或SHM重置时，它应该提高性能。 默认的“”禁用基于文件的缓存。
;opcache.file_cache=

; 启用或禁用共享内存中的操作码缓存。
;opcache.file_cache_only=0

; 从文件缓存加载脚本时启用或禁用校验和验证。
;opcache.file_cache_consistency_checks=1

; 表示opcache.file_cache_only = 1表示某个进程无法重新连接到共享内存（仅适用于Windows）。
; 需要明确启用文件缓存。
;opcache.file_cache_fallback=1

; 启用或禁用将PHP代码（文本段）复制到HUGE PAGES中。
; 这样可以提高性能，但是需要适当的OS配置。
;opcache.huge_code_pages=1

; 验证缓存的文件权限。
;opcache.validate_permission=0

; 防止在chroot环境中发生名称冲突。
;opcache.validate_root=0

; 如果指定，它将生成用于调试优化的不同阶段的操作码转储。
;opcache.opt_debug_level=0

; 指定将在服务器启动时编译和执行的PHP脚本。
; http://php.net/opcache.preload
;opcache.preload=

; 出于安全原因，不允许将代码作为root预加载。 
; 该指令有助于使预加载以另一个用户的身份运行。
; http://php.net/opcache.preload_user
;opcache.preload_user=

; 防止缓存少于此秒数的文件。
; 它可以防止缓存未完全更新的文件。 
; 如果您网站上的所有文件更新都是原子更新，则可以通过将其设置为“ 0”来提高性能。
;opcache.file_update_protection=2

; 用于存储共享锁文件的绝对路径（仅适用于* nix）。
;opcache.lockfile_path=/tmp

[curl]
; CURLOPT_CAINFO选项的默认值。
; 这是绝对路径。
;curl.cainfo =

[openssl]
; 验证SSL/TLS对等方的身份时要在本地文件系统上使用的证书颁发机构（CA）文件的位置。
; 大多数用户不应为此指令指定值，因为PHP会在缺少该指令的情况下尝试使用OS管理的证书存储。
;openssl.cafile=

; 如果未指定openssl.cafile或未找到CA文件，则在openssl.capath指向的目录中搜索合适的证书。
; 此值必须是正确散列的证书目录。
; 大多数用户不应为此指令指定值，因为PHP会在缺少该指令的情况下尝试使用OS管理的证书存储。 If specified,
;openssl.capath=

[ffi]
; FFI API限制。
; 可能的值:
; "preload" - enabled in CLI scripts and preloaded files (default)
; "false"   - always disabled
; "true"    - always enabled
;ffi.enable=preload

; 要预加载的头文件列表，允许使用通配符模式。
;ffi.preload=